import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import './StartForm.css';
import axios from 'axios';
const checklistItems = [
  'рдкрд╛рд░реНрдХрд┐рдВрдЧ рдмреНрд░реЗрдХ', 'рд▓рд╛рдЗрдЯреНрд╕ рдФрд░ рд╣реЙрд░реНрди', 'рдбреИрд╢рдмреЛрд░реНрдб',
  'рд▓рд╛рдЗрдЯреНрд╕ рд╡рд╛рдЗрдкрд░', 'рд╕рд╛рдЗрдВрдЯ рдмреЛрд░реНрдб', 'рдмреИрдардХ рд╕реАрдЯ/рд╕реБрд░рдХреНрд╖рд╛ рдмреЗрд▓реНрдЯ',
  'рд╣реЙрдкрд░', 'рд╕реНрдЯреЗрдкреНрд╕ / рд╣реИрдВрдб рд░реЗрд▓реНрд╕', 'рдЗрдВрдЬрди рдЖрд╡рд╛рдЬ',
  'рд╕рд╛рдЗрд░рди', 'рдЯрд╛рдпрд░ / рд╡реНрд╣реАрд▓ рдирдЯреНрд╕ / рд░рд┐рдореНрд╕', 'рд╕реНрдЯреАрдпрд░рд┐рдВрдЧ',
  'рдЯреВрд▓ рдмреЙрдХреНрд╕', 'рджрд░рд╡рд╛рдЬрд╛ / рд╢реАрд╢рд╛ / рдЧреЗрдЯреНрд╕', 'рд░реЗрдбрд┐рдПрдЯрд░',
  'рдмреИрдЯрд░реА', 'рдлрд╛рдпрд░ рдПрдХреНрд╕реНрдЯрд┐рдВрдЧреБрд╢рд░', 'рдорд┐рд░рд░',
];

const worksiteOptions = [
  'рдорд╛рдЗрдВрд╕ рд╕реЗ OB рдбрдВрдк',
  'рдорд╛рдЗрдВрд╕ рд╕реЗ COAL рдбрдВрдк',
  'рдорд╛рдЗрдВрд╕ рд╕реЗ рдХреНрд░рд╢рд░',
  'COAL рд╕реНрдЯреЙрдХ рд╕реЗ рдХреНрд░рд╢рд░',
  'рдХреНрд░рд╢рд░ COAL рд╢рд┐рдкрд┐рдВрдЧ',
  'рдмреИрд▓рд┐рдВрдЧ рдкреНрд▓рд╛рдВрдЯ',
  'рдЕрдиреНрдп рд╕реНрдерд▓'
];

const VehicleReportForm = ({ onFormSubmit, onClose }) => {
  const { user } = useSelector((state) => state.auth);
  const [username] = useState(user ? user.username : 'him');
  const today = new Date().toLocaleDateString('en-GB').split('/').join('-');

  const [note, setNote] = useState('');
  const [breakdownNote, setBreakdownNote] = useState('');
  const [checkedValues, setCheckedValues] = useState({});
  const [repairReported, setRepairReported] = useState('');
  const [mechanicPin, setMechanicPin] = useState('');
  const [driverPin, setDriverPin] = useState('');
  const [footerPins, setFooterPins] = useState({ driver: '', supervisor: '', incharge: '' });
  const [tripRows, setTripRows] = useState([
    { tipper: '', time: '', machine: '', material: '', site: '' },
    { tipper: '', time: '', machine: '', material: '', site: '' }
  ]);

  const [tripDetails, setTripDetails] = useState({
    tripDate: today,
    shift: '',
    relay: '',
    driverName: username || '',
    dumperNumber: '',
    operatorId: '',
    startHMR: '',
    closeHMR: '',
    startKM: '',
    closeKM: ''
  });

  const handleTripChange = (e) => {
    const { id, value } = e.target;
    setTripDetails(prev => ({ ...prev, [id]: value }));
  };

  const handleChange = (idx, value) => {
    setCheckedValues((prev) => ({ ...prev, [idx]: value }));
  };

  const handleSelectAllOk = () => {
    const allOk = {};
    checklistItems.forEach((_, idx) => (allOk[idx] = 'OK'));
    setCheckedValues(allOk);
  };

  const handleClearAll = () => setCheckedValues({});

  const startListening = (callback, type = "text") => {
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = 'hi-IN';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onresult = (event) => {
      let transcript = event.results[0][0].transcript;

      if (type === "number") {
        transcript = transcript.replace(/[^\d]/g, '');
      } else if (type === "alphanumeric") {
        transcript = transcript.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();
      }

      callback(prev => prev + ' ' + transcript);
    };

    recognition.onerror = (event) => alert('рдорд╛рдЗрдХ рд╕реЗ рдЗрдирдкреБрдЯ рдирд╣реАрдВ рд╣реЛ рдкрд╛рдпрд╛: ' + event.error);
    recognition.start();
  };

  const handleSubmit = async () => {
    const payload = {
      checklist: checkedValues,
      notes: note,
      breakdownNote,
      repairReported,
      mechanicPin,
      driverPin,
      tripRows,
      footerPins,
      tripDetails,
    };

    try {
      const response = await axios.post('http://localhost:5000/api/vehicle-report/submit', payload);
      const formId = response.data.formId;

      alert(`Form submitted! Form ID: ${formId}`);

      if (onFormSubmit) {
        onFormSubmit(formId); // тЬЕ inform parent
      }
    } catch (err) {
      console.error("Submission error", err);
      alert("Error submitting form");
    }
  };

  const updateTripRow = (index, field, value) => {
    const updated = [...tripRows];
    updated[index][field] = value;
    setTripRows(updated);
  };
  return (
    <div className="form-wrapper">
      <div className="a4-form">
        <button type="button" onClick={onClose}>тЭМ Close Form</button>
        <div className="form-header">
          <h2>рдереНрд░рд┐рд╡реЗрдгреА рд╕реИрдирд┐реШ рдорд╛рдЗрдВрд╕ рдкреНрд░рд╛рдЗрд╡реЗрдЯ рд▓рд┐рдорд┐рдЯреЗрдб</h2>
          <h3>рдкрдЪрдореА рдмреЛрдХрд╛рд░реЛ рдХреЛрд▓ рдорд╛рдЗрдВрд╕ рдкреНрд░реЛрдЬреЗрдХреНрдЯ</h3>
          <h4>рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдкреНрд░реА-рд╕реНрдЯрд╛рд░реНрдЯ рдЪреЗрдХ рд▓рд┐рд╕реНрдЯ</h4>
        </div>

        <div className="checklist-buttons">
          <button onClick={handleSelectAllOk}>тЬЕ Select All OK</button>
          <button onClick={handleClearAll}>тЭМ Clear All</button>
        </div>

        <div className="checklist-grid">
          {checklistItems.map((label, idx) => (
            <div key={idx} className="checklist-item">
              <span>{label}</span>
              <span>
                <label><input type="radio" name={`check-${idx}`} checked={checkedValues[idx] === 'OK'} onChange={() => handleChange(idx, 'OK')} /> OK</label>
                <label><input type="radio" name={`check-${idx}`} checked={checkedValues[idx] === 'Not OK'} onChange={() => handleChange(idx, 'Not OK')} /> Not OK</label>
              </span>
            </div>
          ))}
        </div>

        <div className="info-section">
          <label>рдЕрдиреНрдп рд╕реВрдЪрдирд╛:</label>
          <textarea value={note} onChange={(e) => setNote(e.target.value)} placeholder="рдпрд╣рд╛рдВ рд▓рд┐рдЦреЗрдВ рдпрд╛ рдорд╛рдЗрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ" />
          <button type="button" onClick={() => startListening(setNote)}>ЁЯОд рдорд╛рдЗрдХ рд╕реЗ рдмреЛрд▓реЗ</button>
        </div>

        <div className="checkbox-line">
          <span>рдЖрд╡рд╢реНрдпрдХ рд░рд┐рдкреЗрд░рд┐рдВрдЧ рдХреА рд╕реВрдЪрдирд╛ рд╕реБрдкрд░рд╡рд╛рдЗрдЬрд╝рд░ рдХреЛ рджреА:</span>
          <label><input type="radio" name="repairReported" value="yes" checked={repairReported === 'yes'} onChange={() => setRepairReported('yes')} /> рд╣рд╛рдВ</label>
          <label><input type="radio" name="repairReported" value="no" checked={repairReported === 'no'} onChange={() => setRepairReported('no')} /> рдирд╣реАрдВ</label>
          <label>рдореИрдХреЗрдирд┐рдХрд▓ рдбрд┐рдкрд╛рд░реНрдЯрдореЗрдВрдЯ PIN: <input type="password" maxLength="6" inputMode="numeric" value={mechanicPin} onChange={(e) => setMechanicPin(e.target.value)} /></label>
          <label>рдбреНрд░рд╛рдЗрд╡рд░ PIN: <input type="password" maxLength="6" inputMode="numeric" value={driverPin} onChange={(e) => setDriverPin(e.target.value)} /></label>
        </div>
<div className="dumper-trip-report">
  <div className="section-title">рдбрдореНрдкрд░ рдЯреНрд░рд┐рдк рд░рд┐рдкреЛрд░реНрдЯ</div>
  <div className="input-grid">

    <div>
      <label htmlFor="tripDate">рджрд┐рдирд╛рдВрдХ:</label>
      <input id="tripDate" type="text" value={tripDetails.tripDate} onChange={handleTripChange} placeholder="dd-mm-yy" />
      <button type="button" onClick={() =>
        startListening(update =>
          setTripDetails(prev => ({ ...prev, tripDate: update(prev.tripDate) })), "alphanumeric")
      }>ЁЯОд</button>
    </div>

    <div>
      <label htmlFor="shift">рд╢рд┐рдлреНрдЯ:</label>
      <select id="shift" value={tripDetails.shift} onChange={handleTripChange}>
        <option value="">-- рдЪреБрдиреЗрдВ --</option>
        <option value="A">A</option>
        <option value="B">B</option>
        <option value="C">C</option>
      </select>
    </div>

    <div>
      <label htmlFor="relay">рд░рд┐рд▓реЗ:</label>
      <input id="relay" type="text" value={tripDetails.relay} onChange={handleTripChange} />
      <button type="button" onClick={() =>
        startListening(update =>
          setTripDetails(prev => ({ ...prev, relay: update(prev.relay) })), "text")
      }>ЁЯОд</button>
    </div>

    <div>
      <label htmlFor="driverName">рдбреНрд░рд╛рдЗрд╡рд░ рдХрд╛ рдирд╛рдо:</label>
      <input id="driverName" type="text" value={tripDetails.driverName} onChange={handleTripChange} readOnly />
    </div>

    <div>
      <label htmlFor="dumperNumber">рдбрдВрдкрд░ рд╕рдВрдЦреНрдпрд╛:</label>
      <input id="dumperNumber" type="text" value={tripDetails.dumperNumber} onChange={handleTripChange} />
      <button type="button" onClick={() =>
        startListening(update =>
          setTripDetails(prev => ({ ...prev, dumperNumber: update(prev.dumperNumber) })), "alphanumeric")
      }>ЁЯОд</button>
     

    </div>

    <div>
      <label htmlFor="operatorId">рдСрдкрд░реЗрдЯрд░ ID:</label>
      <input id="operatorId" type="text" value={tripDetails.operatorId} onChange={handleTripChange} />
      <button type="button" onClick={() =>
        startListening(update =>
          setTripDetails(prev => ({ ...prev, operatorId: update(prev.operatorId) })), "alphanumeric")
      }>ЁЯОд</button>
    </div>

    <div>
      <label htmlFor="startHMR">рд╕реНрдЯрд╛рд░реНрдЯрд┐рдВрдЧ HMR:</label>
      <input id="startHMR" type="text" value={tripDetails.startHMR} onChange={handleTripChange} />
      <button type="button" onClick={() =>
        startListening(update =>
          setTripDetails(prev => ({ ...prev, startHMR: update(prev.startHMR) })), "number")
      }>ЁЯОд</button>
    </div>

    <div>
      <label htmlFor="closeHMR">рдХреНрд▓реЛрдЬрд┐рдВрдЧ HMR:</label>
      <input id="closeHMR" type="text" value={tripDetails.closeHMR} onChange={handleTripChange} />
      <button type="button" onClick={() =>
        startListening(update =>
          setTripDetails(prev => ({ ...prev, closeHMR: update(prev.closeHMR) })), "number")
      }>ЁЯОд</button>
    </div>

    <div>
      <label htmlFor="startKM">рд╕реНрдЯрд╛рд░реНрдЯрд┐рдВрдЧ рдХрд┐рд▓реЛрдореАрдЯрд░:</label>
      <input id="startKM" type="text" value={tripDetails.startKM} onChange={handleTripChange} />
      <button type="button" onClick={() =>
        startListening(update =>
          setTripDetails(prev => ({ ...prev, startKM: update(prev.startKM) })), "number")
      }>ЁЯОд</button>
    </div>

    <div>
      <label htmlFor="closeKM">рдХреНрд▓реЛрдЬрд┐рдВрдЧ рдХрд┐рд▓реЛрдореАрдЯрд░:</label>
      <input id="closeKM" type="text" value={tripDetails.closeKM} onChange={handleTripChange} />
      <button type="button" onClick={() =>
        startListening(update =>
          setTripDetails(prev => ({ ...prev, closeKM: update(prev.closeKM) })), "number")
      }>ЁЯОд</button>
    </div>

  </div>
</div>



       <table className="details-table">
  <thead>
    <tr>
      <th>рдЯрд┐рдкрд░ рд╕рдВрдЦреНрдпрд╛</th>
      <th>рд╕рдордп</th>
      <th>Machine Number</th>
      <th>рдорд╛рд▓</th>
      <th>рдХрд╛рд░реНрдп рд╕реНрдерд▓</th>
    </tr>
  </thead>
  <tbody>
    {tripRows.map((row, i) => (
      <tr key={i}>
        {/* Fixed tipper number */}
        <td style={{ textAlign: 'center' }}>{i + 1}</td>

        {/* Time input with Set button */}
        <td style={{ display: 'flex', gap: '4px', alignItems: 'center' }}>
          <input
            value={row.time}
            onChange={(e) => updateTripRow(i, 'time', e.target.value)}
            placeholder="HH:MM"
            style={{ flex: '1' }}
          />
          <button
            type="button"
            onClick={() => {
              const now = new Date();
              const timeStr = now.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
              updateTripRow(i, 'time', timeStr);
            }}
            style={{ padding: '2px 6px' }}
          >
            Set
          </button>
        </td>

        {/* Other fields */}
        <td>
          <input
            value={row.machine}
            onChange={(e) => updateTripRow(i, 'machine', e.target.value)}
          />
        </td>
        <td>
          <label>
            <input
              type="radio"
              name={`material-${i}`}
              value="OB"
              checked={row.material === 'OB'}
              onChange={() => updateTripRow(i, 'material', 'OB')}
            /> OB
          </label>
          <label style={{ marginLeft: '10px' }}>
            <input
              type="radio"
              name={`material-${i}`}
              value="Coal"
              checked={row.material === 'Coal'}
              onChange={() => updateTripRow(i, 'material', 'Coal')}
            /> Coal
          </label>
        </td>
        <td>
          <select
            value={row.site}
            onChange={(e) => updateTripRow(i, 'site', e.target.value)}
          >
            <option value="">-- рдХрд╛рд░реНрдп рд╕реНрдерд▓ рдЪреБрдиреЗрдВ --</option>
            {worksiteOptions.map((opt, idx) => (
              <option key={idx} value={opt}>
                {opt}
              </option>
            ))}
          </select>
        </td>
      </tr>
    ))}
  </tbody>
</table>



        <div className="footer-section">
          <label>рдмреНрд░реЗрдХрдбрд╛рдЙрди рд░рд┐рдкреЛрд░реНрдЯ рд╡ рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ:</label>
          <textarea value={breakdownNote} onChange={(e) => setBreakdownNote(e.target.value)} placeholder="рдпрд╣рд╛рдБ рд╡рд┐рд╡рд░рдг рд▓рд┐рдЦреЗрдВ рдпрд╛ рдорд╛рдЗрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ" />
          <button type="button" onClick={() => startListening(setBreakdownNote)}>ЁЯОд рдорд╛рдЗрдХ рд╕реЗ рдмреЛрд▓реЗ</button>
          <div className="pin-grid">
            <label>рдбреНрд░рд╛рдЗрд╡рд░ Pin: <input type="password" maxLength="6" value={footerPins.driver} onChange={(e) => setFooterPins({ ...footerPins, driver: e.target.value })} /></label>
            <label>рд╢рд┐рдлреНрдЯ рд╕реБрдкрд░рд╡рд╛рдЗрдЬрд░ Pin: <input type="password" maxLength="6" value={footerPins.supervisor} onChange={(e) => setFooterPins({ ...footerPins, supervisor: e.target.value })} /></label>
            <label>рд╢рд┐рдлреНрдЯ рдЗрдиреНрдЪрд╛рд░реНрдЬ Pin: <input type="password" maxLength="6" value={footerPins.incharge} onChange={(e) => setFooterPins({ ...footerPins, incharge: e.target.value })} /></label>
          </div>
        </div>

        <button className="submit-btn" onClick={handleSubmit}>рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ</button>
         
      </div>
    </div>
  );
};

export default VehicleReportForm;
